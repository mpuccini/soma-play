name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  id-token: write
  packages: write
  pull-requests: read
  statuses: write

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get-version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "Tag version: $TAG_VERSION"
    
    - name: Get version from Cargo.toml
      id: cargo-version
      run: |
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
        echo "Cargo.toml version: $CARGO_VERSION"
    
    - name: Validate versions match
      run: |
        TAG_VERSION=${{ steps.get-version.outputs.version }}
        CARGO_VERSION=${{ steps.cargo-version.outputs.cargo_version }}
        
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "‚ùå Version mismatch!"
          echo "Tag version: $TAG_VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Please update Cargo.toml version to match the tag, or use the correct tag."
          exit 1
        else
          echo "‚úÖ Versions match: $TAG_VERSION"
        fi

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: [validate-version]
    if: always() && (needs.validate-version.result == 'success' || !startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: soma-player
            archive_name: soma-player-linux-x64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: soma-player
            archive_name: soma-player-macos-arm64.tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS should have audio frameworks built-in
        echo "No additional dependencies needed for macOS"

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Generate SBOM
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        # Install cargo-cyclonedx for SBOM generation
        cargo install cargo-cyclonedx
        
        # Generate SBOM in multiple formats (correct syntax)
        echo "üîÑ Generating JSON SBOM..."
        cargo cyclonedx --format json > sbom.json
        
        echo "üîÑ Generating XML SBOM..."
        cargo cyclonedx --format xml > sbom.xml
        
        # Generate dependency tree with validation
        echo "üìã Generating dependency tree..."
        cargo tree > dependencies.txt
        
        # Validate files were created and are not empty
        echo "üîç Validating generated files..."
        for file in sbom.json sbom.xml dependencies.txt; do
          if [ -f "$file" ] && [ -s "$file" ]; then
            echo "‚úÖ $file: $(wc -c < "$file") bytes"
          else
            echo "‚ùå $file: Missing or empty!"
            # Create a minimal file to prevent upload errors
            echo "# Error: $file generation failed" > "$file"
          fi
        done
        
        # Show file sizes for debugging
        ls -la sbom.json sbom.xml dependencies.txt

    - name: Upload SBOM artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          sbom.json
          sbom.xml
          dependencies.txt

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: ${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: read
      packages: write
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Move artifacts to root
      run: |
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} . \;

    - name: List files for debugging
      run: ls -la

    - name: Move SBOM files
      run: |
        if [ -d "artifacts/sbom-files" ]; then
          mv artifacts/sbom-files/* .
          
          # Validate SBOM files before upload
          echo "üîç Validating SBOM files for upload..."
          for file in sbom.json sbom.xml dependencies.txt; do
            if [ -f "$file" ]; then
              size=$(wc -c < "$file")
              echo "$file: $size bytes"
              if [ "$size" -eq 0 ]; then
                echo "‚ö†Ô∏è $file is empty, removing from upload"
                rm "$file"
              fi
            else
              echo "‚ö†Ô∏è $file not found"
            fi
          done
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        files: |
          *.tar.gz
          sbom.json
          sbom.xml
          dependencies.txt
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        generate_release_notes: true
        make_latest: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: [validate-version, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Verify package can be built
      run: cargo build --release

    - name: Run tests
      run: cargo test

    - name: Dry run publish
      run: cargo publish --dry-run

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
